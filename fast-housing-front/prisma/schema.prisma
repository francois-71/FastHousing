// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  // we must define the name field for some OAuth providers which require it (e.g. Github)
  name           String?
  firstName      String?
  lastName       String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?

  role       RoleEnum?  @default(USER)
  image      String?
  accounts   Account[]
  sessions   Session[]
  Properties Property[]
  Review     Review[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model Image {
  id         String   @id @default(cuid())
  url        String
  filename   String
  coverImage Boolean  @default(false)
  order      Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @map("property_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, order])
  @@map("images")
}

model Property {
  id                String            @id @default(cuid())
  name              String
  address           String
  city              String
  state             String
  zip               String
  country           String
  description       String
  images            Image[]
  price             Int
  rating            Int?
  currency          CurrencyEnum
  amenities         AmenitiesEnum[]
  rooms             Int
  sizeValue         Int
  sizeMetric        SizeMetricsEnum
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String            @map("user_id")
  reviews           Review[]
  accommodationType AccommodationEnum
  categories        String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("properties")
}

model Currency {
  id        Int          @id @default(autoincrement())
  code      String       @unique
  name      CurrencyEnum
  symbol    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  title      String
  body       String
  rating     Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @map("property_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

enum RoleEnum {
  USER
  ADMIN
  HOST
}

enum AccommodationEnum {
  APARTMENT
  HOUSE
  VILLA
  HOTEL
  RESORT
  MOTEL
  HOSTEL
}

enum CurrencyEnum {
  USD
  EUR
  GBP
  JPY
  CNY
  INR
  RUB
  AUD
  CAD
  ZAR
  BRL
  MXN
  CHF
  SEK
  NZD
  KRW
  SGD
  NOK
  TRY
  HKD
  DKK
  PLN
  TWD
  THB
  IDR
  HUF
  CZK
  ILS
  CLP
  PHP
  AED
  COP
  SAR
  MYR
  RON
  KES
  NGN
  UAH
  PKR
  EGP
  VND
  IQD
  KWD
  DZD
  QAR
  BHD
  LBP
  JOD
  CRC
  HNL
  NIO
  GTQ
  PAB
  SVC
  BZD
  BBD
  BSD
  JMD
  KYD
  TTD
  XCD
  ANG
  AWG
  BMD
  VEF
  GYD
  SRD
  UYU
  PYG
  BOB
  ARS
  CLF
  PEN
  CUP
  DOP
  HTG
  CUC
  MXV
  BWP
  ZMW
  MZN
  MGA
  MUR
  MRO
  MOP
  MDL
  LSL
  LRD
  LAK
  KZT
  KGS
  KHR
  KMF
}

enum AmenitiesEnum {
  WIFI
  TV
  KITCHEN
  AIR_CONDITIONING
  HEATING
  WASHER
  DRYER
  PARKING
  GYM
  POOL
  HOT_TUB
  BBQ
  PATIO
  BALCONY
  GARDEN
}

enum SizeMetricsEnum {
  SQM
  SQFT
}

generator zod {
  provider                  = "npx zod-prisma-types"
  createRelationValuesTypes = true
  createPartialTypes        = true
}
